(in-package :lisp-language-workbench)

(defgeneric form-template (form))

(defmethod form-template ((form form))
  (let ((class (class-of form)))
    `(,(class-name class) ,@(closer-mop:class-slots class))))

(defun read-form (sexp)
  (if (listp sexp)
      (if (symbolp (car sexp))
	  (read-complex-form sexp)
	  (mapcar #'read-form sexp))
      sexp))

(defun read-complex-form (sexp)
  (let* ((form-class (find-class (car sexp)))
	 (template (form-template (closer-mop:class-prototype form-class)))
	 (slot-map (list))
	 (compiled-template (mapcar (lambda (x)
				      (if (typep x 'closer-mop:slot-definition)
					  (let* ((slot-name (closer-mop:slot-definition-name x))
						 (sym (make-symbol (format nil "?~A" slot-name))))
					    (push (cons sym slot-name) slot-map)
					    sym)
					  x))
				    template))
	 (matching-sexp (mapcar (lambda (x) (if (consp x) (read-form x) x))
				(ensure-list-length sexp (length compiled-template))))
	 (unification (cl-unification:unify compiled-template matching-sexp))
	 (result (make-instance form-class)))
    (map nil (lambda (f)
	       (map nil (lambda (b)
			  (setf (slot-value result (cdr (assoc (car b) slot-map))) (cdr b)))
		    (cl-unification::frame-bindings f)))
	 (cl-unification::environment-frames unification))
    result))

(defun ensure-list-length (list length &optional fill-with)
  (let ((diff (- length (length list))))
    (if (> diff 0)
	(append list (make-list diff :initial-element fill-with))
	list)))

(defclass sexp-transformer () ())
(defmethod transform ((transformer sexp-transformer) form environment)
  form)
(defmethod transform ((transformer sexp-transformer) (form list) environment)
  (mapcar (lambda (form) (transform transformer form environment)) form))
(defmethod transform ((transformer sexp-transformer) (form form) environment)
  (let ((template (form-template form)))
    (mapcar (lambda (x)
	      (if (typep x 'closer-mop:slot-definition)
		  (if (slot-boundp form (closer-mop:slot-definition-name x))
		      (transform transformer (slot-value form (closer-mop:slot-definition-name x)) environment)
		      nil)
		  x))
	    template)))

(defmethod print-object ((object form) stream)
  (print `(read-form ',(transform (make-instance 'sexp-transformer) object *environment*)) stream))

(defmethod cl-unification::occurs-in-p ((var cl:symbol) (pat form) env)
  nil) ;To avoid WARNING: Occurrence test unimplemented for pattern...
(defmethod cl-unification::occurs-in-p ((var cl:symbol) (pat symbol) env)
  nil) ;To avoid WARNING: Occurrence test unimplemented for pattern...
